CCS PCM C Compiler, Version 5.007, 61971               29-Ara-21 23:52

               Filename:   C:\Users\Eray\Desktop\Sicaklik Sensoru.lst

               ROM used:   1469 words (18%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           41 (11%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   516
0003:  NOP
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,29
000D:  DATA E9,31
000E:  DATA E1,35
000F:  DATA EC,34
0010:  DATA EB,1E
0011:  DATA A0,12
0012:  DATA E6,21
0013:  DATA 00,00
*
00AE:  MOVLW  8E
00AF:  MOVWF  77
00B0:  MOVF   2B,W
00B1:  MOVWF  78
00B2:  MOVF   2A,W
00B3:  MOVWF  79
00B4:  CLRF   7A
00B5:  MOVF   78,F
00B6:  BTFSS  03.2
00B7:  GOTO   0C2
00B8:  MOVF   79,W
00B9:  MOVWF  78
00BA:  CLRF   79
00BB:  MOVLW  08
00BC:  SUBWF  77,F
00BD:  MOVF   78,F
00BE:  BTFSS  03.2
00BF:  GOTO   0C2
00C0:  CLRF   77
00C1:  GOTO   0CA
00C2:  BCF    03.0
00C3:  BTFSC  78.7
00C4:  GOTO   0C9
00C5:  RLF    79,F
00C6:  RLF    78,F
00C7:  DECF   77,F
00C8:  GOTO   0C2
00C9:  BCF    78.7
00CA:  BCF    0A.3
00CB:  BCF    0A.4
00CC:  GOTO   557 (RETURN)
00CD:  MOVF   37,W
00CE:  BTFSC  03.2
00CF:  GOTO   13D
00D0:  MOVWF  3F
00D1:  MOVF   3B,W
00D2:  BTFSC  03.2
00D3:  GOTO   13D
00D4:  ADDWF  3F,F
00D5:  BTFSC  03.0
00D6:  GOTO   0DE
00D7:  MOVLW  7F
00D8:  SUBWF  3F,F
00D9:  BTFSS  03.0
00DA:  GOTO   13D
00DB:  BTFSC  03.2
00DC:  GOTO   13D
00DD:  GOTO   0E2
00DE:  MOVLW  81
00DF:  ADDWF  3F,F
00E0:  BTFSC  03.0
00E1:  GOTO   13D
00E2:  MOVF   3F,W
00E3:  MOVWF  77
00E4:  CLRF   78
00E5:  CLRF   79
00E6:  CLRF   7A
00E7:  MOVF   38,W
00E8:  MOVWF  43
00E9:  BSF    43.7
00EA:  MOVF   39,W
00EB:  MOVWF  42
00EC:  MOVF   3A,W
00ED:  MOVWF  41
00EE:  MOVLW  18
00EF:  MOVWF  3F
00F0:  CLRF   40
00F1:  BTFSS  41.0
00F2:  GOTO   10B
00F3:  MOVF   3E,W
00F4:  ADDWF  7A,F
00F5:  BTFSS  03.0
00F6:  GOTO   0FD
00F7:  INCF   79,F
00F8:  BTFSS  03.2
00F9:  GOTO   0FD
00FA:  INCF   78,F
00FB:  BTFSC  03.2
00FC:  BSF    40.7
00FD:  MOVF   3D,W
00FE:  ADDWF  79,F
00FF:  BTFSS  03.0
0100:  GOTO   104
0101:  INCF   78,F
0102:  BTFSC  03.2
0103:  BSF    40.7
0104:  MOVF   3C,W
0105:  MOVWF  39
0106:  BSF    39.7
0107:  MOVF   39,W
0108:  ADDWF  78,F
0109:  BTFSC  03.0
010A:  BSF    40.7
010B:  RLF    40,F
010C:  RRF    78,F
010D:  RRF    79,F
010E:  RRF    7A,F
010F:  RRF    43,F
0110:  RRF    42,F
0111:  RRF    41,F
0112:  BCF    03.0
0113:  DECFSZ 3F,F
0114:  GOTO   0F0
0115:  MOVLW  01
0116:  ADDWF  77,F
0117:  BTFSC  03.0
0118:  GOTO   13D
0119:  BTFSC  78.7
011A:  GOTO   122
011B:  RLF    43,F
011C:  RLF    7A,F
011D:  RLF    79,F
011E:  RLF    78,F
011F:  DECF   77,F
0120:  BTFSC  03.2
0121:  GOTO   13D
0122:  BTFSS  43.7
0123:  GOTO   133
0124:  INCF   7A,F
0125:  BTFSS  03.2
0126:  GOTO   133
0127:  INCF   79,F
0128:  BTFSS  03.2
0129:  GOTO   133
012A:  INCF   78,F
012B:  BTFSS  03.2
012C:  GOTO   133
012D:  RRF    78,F
012E:  RRF    79,F
012F:  RRF    7A,F
0130:  INCF   77,F
0131:  BTFSC  03.2
0132:  GOTO   13D
0133:  MOVF   38,W
0134:  MOVWF  40
0135:  MOVF   3C,W
0136:  XORWF  40,F
0137:  BTFSS  40.7
0138:  GOTO   13B
0139:  BSF    78.7
013A:  GOTO   141
013B:  BCF    78.7
013C:  GOTO   141
013D:  CLRF   77
013E:  CLRF   78
013F:  CLRF   79
0140:  CLRF   7A
0141:  RETURN
0142:  MOVF   2A,W
0143:  BTFSC  03.2
0144:  GOTO   207
0145:  MOVWF  36
0146:  MOVF   2E,W
0147:  BTFSC  03.2
0148:  GOTO   207
0149:  SUBWF  36,F
014A:  BTFSS  03.0
014B:  GOTO   151
014C:  MOVLW  7F
014D:  ADDWF  36,F
014E:  BTFSC  03.0
014F:  GOTO   207
0150:  GOTO   157
0151:  MOVLW  81
0152:  SUBWF  36,F
0153:  BTFSS  03.0
0154:  GOTO   207
0155:  BTFSC  03.2
0156:  GOTO   207
0157:  MOVF   36,W
0158:  MOVWF  77
0159:  CLRF   78
015A:  CLRF   79
015B:  CLRF   7A
015C:  CLRF   35
015D:  MOVF   2B,W
015E:  MOVWF  34
015F:  BSF    34.7
0160:  MOVF   2C,W
0161:  MOVWF  33
0162:  MOVF   2D,W
0163:  MOVWF  32
0164:  MOVLW  19
0165:  MOVWF  36
0166:  MOVF   31,W
0167:  SUBWF  32,F
0168:  BTFSC  03.0
0169:  GOTO   17A
016A:  MOVLW  01
016B:  SUBWF  33,F
016C:  BTFSC  03.0
016D:  GOTO   17A
016E:  SUBWF  34,F
016F:  BTFSC  03.0
0170:  GOTO   17A
0171:  SUBWF  35,F
0172:  BTFSC  03.0
0173:  GOTO   17A
0174:  INCF   35,F
0175:  INCF   34,F
0176:  INCF   33,F
0177:  MOVF   31,W
0178:  ADDWF  32,F
0179:  GOTO   1AC
017A:  MOVF   30,W
017B:  SUBWF  33,F
017C:  BTFSC  03.0
017D:  GOTO   195
017E:  MOVLW  01
017F:  SUBWF  34,F
0180:  BTFSC  03.0
0181:  GOTO   195
0182:  SUBWF  35,F
0183:  BTFSC  03.0
0184:  GOTO   195
0185:  INCF   35,F
0186:  INCF   34,F
0187:  MOVF   30,W
0188:  ADDWF  33,F
0189:  MOVF   31,W
018A:  ADDWF  32,F
018B:  BTFSS  03.0
018C:  GOTO   1AC
018D:  INCF   33,F
018E:  BTFSS  03.2
018F:  GOTO   1AC
0190:  INCF   34,F
0191:  BTFSS  03.2
0192:  GOTO   1AC
0193:  INCF   35,F
0194:  GOTO   1AC
0195:  MOVF   2F,W
0196:  IORLW  80
0197:  SUBWF  34,F
0198:  BTFSC  03.0
0199:  GOTO   1AB
019A:  MOVLW  01
019B:  SUBWF  35,F
019C:  BTFSC  03.0
019D:  GOTO   1AB
019E:  INCF   35,F
019F:  MOVF   2F,W
01A0:  IORLW  80
01A1:  ADDWF  34,F
01A2:  MOVF   30,W
01A3:  ADDWF  33,F
01A4:  BTFSS  03.0
01A5:  GOTO   189
01A6:  INCF   34,F
01A7:  BTFSS  03.2
01A8:  GOTO   189
01A9:  INCF   35,F
01AA:  GOTO   189
01AB:  BSF    7A.0
01AC:  DECFSZ 36,F
01AD:  GOTO   1AF
01AE:  GOTO   1BA
01AF:  BCF    03.0
01B0:  RLF    32,F
01B1:  RLF    33,F
01B2:  RLF    34,F
01B3:  RLF    35,F
01B4:  BCF    03.0
01B5:  RLF    7A,F
01B6:  RLF    79,F
01B7:  RLF    78,F
01B8:  RLF    37,F
01B9:  GOTO   166
01BA:  BTFSS  37.0
01BB:  GOTO   1C2
01BC:  BCF    03.0
01BD:  RRF    78,F
01BE:  RRF    79,F
01BF:  RRF    7A,F
01C0:  RRF    37,F
01C1:  GOTO   1C5
01C2:  DECF   77,F
01C3:  BTFSC  03.2
01C4:  GOTO   207
01C5:  BTFSC  37.7
01C6:  GOTO   1EE
01C7:  BCF    03.0
01C8:  RLF    32,F
01C9:  RLF    33,F
01CA:  RLF    34,F
01CB:  RLF    35,F
01CC:  MOVF   31,W
01CD:  SUBWF  32,F
01CE:  BTFSC  03.0
01CF:  GOTO   1DA
01D0:  MOVLW  01
01D1:  SUBWF  33,F
01D2:  BTFSC  03.0
01D3:  GOTO   1DA
01D4:  SUBWF  34,F
01D5:  BTFSC  03.0
01D6:  GOTO   1DA
01D7:  SUBWF  35,F
01D8:  BTFSS  03.0
01D9:  GOTO   1FD
01DA:  MOVF   30,W
01DB:  SUBWF  33,F
01DC:  BTFSC  03.0
01DD:  GOTO   1E5
01DE:  MOVLW  01
01DF:  SUBWF  34,F
01E0:  BTFSC  03.0
01E1:  GOTO   1E5
01E2:  SUBWF  35,F
01E3:  BTFSS  03.0
01E4:  GOTO   1FD
01E5:  MOVF   2F,W
01E6:  IORLW  80
01E7:  SUBWF  34,F
01E8:  BTFSC  03.0
01E9:  GOTO   1EE
01EA:  MOVLW  01
01EB:  SUBWF  35,F
01EC:  BTFSS  03.0
01ED:  GOTO   1FD
01EE:  INCF   7A,F
01EF:  BTFSS  03.2
01F0:  GOTO   1FD
01F1:  INCF   79,F
01F2:  BTFSS  03.2
01F3:  GOTO   1FD
01F4:  INCF   78,F
01F5:  BTFSS  03.2
01F6:  GOTO   1FD
01F7:  INCF   77,F
01F8:  BTFSC  03.2
01F9:  GOTO   207
01FA:  RRF    78,F
01FB:  RRF    79,F
01FC:  RRF    7A,F
01FD:  MOVF   2B,W
01FE:  MOVWF  36
01FF:  MOVF   2F,W
0200:  XORWF  36,F
0201:  BTFSS  36.7
0202:  GOTO   205
0203:  BSF    78.7
0204:  GOTO   20B
0205:  BCF    78.7
0206:  GOTO   20B
0207:  CLRF   77
0208:  CLRF   78
0209:  CLRF   79
020A:  CLRF   7A
020B:  BCF    0A.3
020C:  BCF    0A.4
020D:  GOTO   57F (RETURN)
020E:  MOVLW  80
020F:  BTFSC  03.1
0210:  XORWF  33,F
0211:  CLRF   38
0212:  CLRF   39
0213:  MOVF   2F,W
0214:  MOVWF  37
0215:  MOVF   33,W
0216:  XORWF  37,F
0217:  MOVF   2E,W
0218:  BTFSC  03.2
0219:  GOTO   2FE
021A:  MOVWF  36
021B:  MOVWF  77
021C:  MOVF   32,W
021D:  BTFSC  03.2
021E:  GOTO   307
021F:  SUBWF  36,F
0220:  BTFSC  03.2
0221:  GOTO   2A3
0222:  BTFSS  03.0
0223:  GOTO   261
0224:  MOVF   33,W
0225:  MOVWF  3C
0226:  BSF    3C.7
0227:  MOVF   34,W
0228:  MOVWF  3B
0229:  MOVF   35,W
022A:  MOVWF  3A
022B:  CLRF   39
022C:  BCF    03.0
022D:  RRF    3C,F
022E:  RRF    3B,F
022F:  RRF    3A,F
0230:  RRF    39,F
0231:  DECFSZ 36,F
0232:  GOTO   22B
0233:  BTFSS  37.7
0234:  GOTO   238
0235:  BSF    38.0
0236:  GOTO   31B
0237:  BCF    38.0
0238:  BCF    36.0
0239:  BSF    38.4
023A:  MOVLW  31
023B:  MOVWF  04
023C:  BCF    03.7
023D:  GOTO   330
023E:  BCF    38.4
023F:  BTFSC  37.7
0240:  GOTO   24B
0241:  BTFSS  36.0
0242:  GOTO   256
0243:  RRF    3C,F
0244:  RRF    3B,F
0245:  RRF    3A,F
0246:  RRF    39,F
0247:  INCF   77,F
0248:  BTFSC  03.2
0249:  GOTO   316
024A:  GOTO   256
024B:  BTFSC  3C.7
024C:  GOTO   259
024D:  BCF    03.0
024E:  RLF    39,F
024F:  RLF    3A,F
0250:  RLF    3B,F
0251:  RLF    3C,F
0252:  DECF   77,F
0253:  BTFSC  03.2
0254:  GOTO   316
0255:  GOTO   24B
0256:  BSF    38.6
0257:  GOTO   2C3
0258:  BCF    38.6
0259:  MOVF   2F,W
025A:  MOVWF  37
025B:  BTFSS  37.7
025C:  GOTO   25F
025D:  BSF    3C.7
025E:  GOTO   30F
025F:  BCF    3C.7
0260:  GOTO   30F
0261:  MOVF   32,W
0262:  MOVWF  36
0263:  MOVWF  77
0264:  MOVF   2E,W
0265:  SUBWF  36,F
0266:  MOVF   2F,W
0267:  MOVWF  3C
0268:  BSF    3C.7
0269:  MOVF   30,W
026A:  MOVWF  3B
026B:  MOVF   31,W
026C:  MOVWF  3A
026D:  CLRF   39
026E:  BCF    03.0
026F:  RRF    3C,F
0270:  RRF    3B,F
0271:  RRF    3A,F
0272:  RRF    39,F
0273:  DECFSZ 36,F
0274:  GOTO   26D
0275:  BTFSS  37.7
0276:  GOTO   27A
0277:  BSF    38.1
0278:  GOTO   31B
0279:  BCF    38.1
027A:  BCF    36.0
027B:  BSF    38.5
027C:  MOVLW  35
027D:  MOVWF  04
027E:  BCF    03.7
027F:  GOTO   330
0280:  BCF    38.5
0281:  BTFSC  37.7
0282:  GOTO   28D
0283:  BTFSS  36.0
0284:  GOTO   298
0285:  RRF    3C,F
0286:  RRF    3B,F
0287:  RRF    3A,F
0288:  RRF    39,F
0289:  INCF   77,F
028A:  BTFSC  03.2
028B:  GOTO   316
028C:  GOTO   298
028D:  BTFSC  3C.7
028E:  GOTO   29B
028F:  BCF    03.0
0290:  RLF    39,F
0291:  RLF    3A,F
0292:  RLF    3B,F
0293:  RLF    3C,F
0294:  DECF   77,F
0295:  BTFSC  03.2
0296:  GOTO   316
0297:  GOTO   28D
0298:  BSF    38.7
0299:  GOTO   2C3
029A:  BCF    38.7
029B:  MOVF   33,W
029C:  MOVWF  37
029D:  BTFSS  37.7
029E:  GOTO   2A1
029F:  BSF    3C.7
02A0:  GOTO   30F
02A1:  BCF    3C.7
02A2:  GOTO   30F
02A3:  MOVF   33,W
02A4:  MOVWF  3C
02A5:  BSF    3C.7
02A6:  MOVF   34,W
02A7:  MOVWF  3B
02A8:  MOVF   35,W
02A9:  MOVWF  3A
02AA:  BTFSS  37.7
02AB:  GOTO   2B0
02AC:  BCF    3C.7
02AD:  BSF    38.2
02AE:  GOTO   31B
02AF:  BCF    38.2
02B0:  CLRF   39
02B1:  BCF    36.0
02B2:  MOVLW  31
02B3:  MOVWF  04
02B4:  BCF    03.7
02B5:  GOTO   330
02B6:  BTFSC  37.7
02B7:  GOTO   2D9
02B8:  MOVF   2F,W
02B9:  MOVWF  37
02BA:  BTFSS  36.0
02BB:  GOTO   2C3
02BC:  RRF    3C,F
02BD:  RRF    3B,F
02BE:  RRF    3A,F
02BF:  RRF    39,F
02C0:  INCF   77,F
02C1:  BTFSC  03.2
02C2:  GOTO   316
02C3:  BTFSS  39.7
02C4:  GOTO   2D4
02C5:  INCF   3A,F
02C6:  BTFSS  03.2
02C7:  GOTO   2D4
02C8:  INCF   3B,F
02C9:  BTFSS  03.2
02CA:  GOTO   2D4
02CB:  INCF   3C,F
02CC:  BTFSS  03.2
02CD:  GOTO   2D4
02CE:  RRF    3C,F
02CF:  RRF    3B,F
02D0:  RRF    3A,F
02D1:  INCF   77,F
02D2:  BTFSC  03.2
02D3:  GOTO   316
02D4:  BTFSC  38.6
02D5:  GOTO   258
02D6:  BTFSC  38.7
02D7:  GOTO   29A
02D8:  GOTO   2F8
02D9:  MOVLW  80
02DA:  XORWF  3C,F
02DB:  BTFSS  3C.7
02DC:  GOTO   2E1
02DD:  GOTO   31B
02DE:  MOVF   33,W
02DF:  MOVWF  37
02E0:  GOTO   2EE
02E1:  MOVF   2F,W
02E2:  MOVWF  37
02E3:  MOVF   3C,F
02E4:  BTFSS  03.2
02E5:  GOTO   2EE
02E6:  MOVF   3B,F
02E7:  BTFSS  03.2
02E8:  GOTO   2EE
02E9:  MOVF   3A,F
02EA:  BTFSS  03.2
02EB:  GOTO   2EE
02EC:  CLRF   77
02ED:  GOTO   30F
02EE:  BTFSC  3C.7
02EF:  GOTO   2F8
02F0:  BCF    03.0
02F1:  RLF    39,F
02F2:  RLF    3A,F
02F3:  RLF    3B,F
02F4:  RLF    3C,F
02F5:  DECFSZ 77,F
02F6:  GOTO   2EE
02F7:  GOTO   316
02F8:  BTFSS  37.7
02F9:  GOTO   2FC
02FA:  BSF    3C.7
02FB:  GOTO   30F
02FC:  BCF    3C.7
02FD:  GOTO   30F
02FE:  MOVF   32,W
02FF:  MOVWF  77
0300:  MOVF   33,W
0301:  MOVWF  3C
0302:  MOVF   34,W
0303:  MOVWF  3B
0304:  MOVF   35,W
0305:  MOVWF  3A
0306:  GOTO   30F
0307:  MOVF   2E,W
0308:  MOVWF  77
0309:  MOVF   2F,W
030A:  MOVWF  3C
030B:  MOVF   30,W
030C:  MOVWF  3B
030D:  MOVF   31,W
030E:  MOVWF  3A
030F:  MOVF   3C,W
0310:  MOVWF  78
0311:  MOVF   3B,W
0312:  MOVWF  79
0313:  MOVF   3A,W
0314:  MOVWF  7A
0315:  GOTO   34E
0316:  CLRF   77
0317:  CLRF   78
0318:  CLRF   79
0319:  CLRF   7A
031A:  GOTO   34E
031B:  CLRF   39
031C:  COMF   3A,F
031D:  COMF   3B,F
031E:  COMF   3C,F
031F:  COMF   39,F
0320:  INCF   39,F
0321:  BTFSS  03.2
0322:  GOTO   329
0323:  INCF   3A,F
0324:  BTFSS  03.2
0325:  GOTO   329
0326:  INCF   3B,F
0327:  BTFSC  03.2
0328:  INCF   3C,F
0329:  BTFSC  38.0
032A:  GOTO   237
032B:  BTFSC  38.1
032C:  GOTO   279
032D:  BTFSC  38.2
032E:  GOTO   2AF
032F:  GOTO   2DE
0330:  MOVF   00,W
0331:  ADDWF  3A,F
0332:  BTFSS  03.0
0333:  GOTO   33A
0334:  INCF   3B,F
0335:  BTFSS  03.2
0336:  GOTO   33A
0337:  INCF   3C,F
0338:  BTFSC  03.2
0339:  BSF    36.0
033A:  DECF   04,F
033B:  MOVF   00,W
033C:  ADDWF  3B,F
033D:  BTFSS  03.0
033E:  GOTO   342
033F:  INCF   3C,F
0340:  BTFSC  03.2
0341:  BSF    36.0
0342:  DECF   04,F
0343:  MOVF   00,W
0344:  BTFSS  00.7
0345:  XORLW  80
0346:  ADDWF  3C,F
0347:  BTFSC  03.0
0348:  BSF    36.0
0349:  BTFSC  38.4
034A:  GOTO   23E
034B:  BTFSC  38.5
034C:  GOTO   280
034D:  GOTO   2B6
034E:  BCF    0A.3
034F:  BCF    0A.4
0350:  GOTO   596 (RETURN)
*
038F:  MOVF   0B,W
0390:  MOVWF  2B
0391:  BCF    0B.7
0392:  BSF    03.5
0393:  BSF    03.6
0394:  BSF    0C.7
0395:  BSF    0C.0
0396:  NOP
0397:  NOP
0398:  BTFSC  03.0
0399:  GOTO   3C1
039A:  BCF    03.5
039B:  MOVF   0C,W
039C:  ANDLW  7F
039D:  BCF    03.6
039E:  MOVWF  2C
039F:  BSF    03.6
03A0:  MOVF   0D,W
03A1:  BCF    03.6
03A2:  MOVWF  2D
03A3:  BSF    03.6
03A4:  MOVF   0F,W
03A5:  BCF    03.6
03A6:  MOVWF  2E
03A7:  MOVF   2C,W
03A8:  MOVWF  37
03A9:  CALL   363
03AA:  MOVF   2D,W
03AB:  BSF    03.6
03AC:  MOVWF  0D
03AD:  BCF    03.6
03AE:  MOVF   2E,W
03AF:  BSF    03.6
03B0:  MOVWF  0F
03B1:  BSF    03.5
03B2:  BSF    0C.7
03B3:  BSF    0C.0
03B4:  NOP
03B5:  NOP
03B6:  BCF    03.5
03B7:  BCF    03.6
03B8:  DECFSZ 2A,F
03B9:  GOTO   3BB
03BA:  GOTO   3BE
03BB:  BSF    03.5
03BC:  BSF    03.6
03BD:  GOTO   3C1
03BE:  GOTO   3E0
03BF:  BSF    03.5
03C0:  BSF    03.6
03C1:  BCF    03.5
03C2:  RLF    0C,W
03C3:  RLF    0E,W
03C4:  ANDLW  7F
03C5:  BCF    03.6
03C6:  MOVWF  2C
03C7:  BSF    03.6
03C8:  MOVF   0D,W
03C9:  BCF    03.6
03CA:  MOVWF  2D
03CB:  BSF    03.6
03CC:  MOVF   0F,W
03CD:  BCF    03.6
03CE:  MOVWF  2E
03CF:  MOVF   2C,W
03D0:  MOVWF  37
03D1:  CALL   363
03D2:  MOVF   2D,W
03D3:  BSF    03.6
03D4:  MOVWF  0D
03D5:  BCF    03.6
03D6:  MOVF   2E,W
03D7:  BSF    03.6
03D8:  MOVWF  0F
03D9:  INCF   0D,F
03DA:  BTFSC  03.2
03DB:  INCF   0F,F
03DC:  BCF    03.0
03DD:  BCF    03.6
03DE:  DECFSZ 2A,F
03DF:  GOTO   392
03E0:  BTFSC  2B.7
03E1:  BSF    0B.7
03E2:  BCF    0A.3
03E3:  BCF    0A.4
03E4:  GOTO   5A8 (RETURN)
03E5:  BTFSC  03.1
03E6:  GOTO   3EA
03E7:  MOVLW  3F
03E8:  MOVWF  04
03E9:  BCF    03.7
03EA:  CLRF   77
03EB:  CLRF   78
03EC:  CLRF   79
03ED:  CLRF   7A
03EE:  CLRF   3F
03EF:  CLRF   40
03F0:  CLRF   41
03F1:  CLRF   42
03F2:  MOVF   3E,W
03F3:  IORWF  3D,W
03F4:  IORWF  3C,W
03F5:  IORWF  3B,W
03F6:  BTFSC  03.2
03F7:  GOTO   428
03F8:  MOVLW  20
03F9:  MOVWF  43
03FA:  BCF    03.0
03FB:  RLF    37,F
03FC:  RLF    38,F
03FD:  RLF    39,F
03FE:  RLF    3A,F
03FF:  RLF    3F,F
0400:  RLF    40,F
0401:  RLF    41,F
0402:  RLF    42,F
0403:  MOVF   3E,W
0404:  SUBWF  42,W
0405:  BTFSS  03.2
0406:  GOTO   411
0407:  MOVF   3D,W
0408:  SUBWF  41,W
0409:  BTFSS  03.2
040A:  GOTO   411
040B:  MOVF   3C,W
040C:  SUBWF  40,W
040D:  BTFSS  03.2
040E:  GOTO   411
040F:  MOVF   3B,W
0410:  SUBWF  3F,W
0411:  BTFSS  03.0
0412:  GOTO   422
0413:  MOVF   3B,W
0414:  SUBWF  3F,F
0415:  MOVF   3C,W
0416:  BTFSS  03.0
0417:  INCFSZ 3C,W
0418:  SUBWF  40,F
0419:  MOVF   3D,W
041A:  BTFSS  03.0
041B:  INCFSZ 3D,W
041C:  SUBWF  41,F
041D:  MOVF   3E,W
041E:  BTFSS  03.0
041F:  INCFSZ 3E,W
0420:  SUBWF  42,F
0421:  BSF    03.0
0422:  RLF    77,F
0423:  RLF    78,F
0424:  RLF    79,F
0425:  RLF    7A,F
0426:  DECFSZ 43,F
0427:  GOTO   3FA
0428:  MOVF   3F,W
0429:  MOVWF  00
042A:  INCF   04,F
042B:  MOVF   40,W
042C:  MOVWF  00
042D:  INCF   04,F
042E:  MOVF   41,W
042F:  MOVWF  00
0430:  INCF   04,F
0431:  MOVF   42,W
0432:  MOVWF  00
0433:  RETURN
0434:  MOVF   04,W
0435:  MOVWF  2F
0436:  MOVF   2E,W
0437:  MOVWF  31
0438:  BTFSC  03.2
0439:  GOTO   453
043A:  MOVF   2D,W
043B:  MOVWF  3A
043C:  MOVF   2C,W
043D:  MOVWF  39
043E:  MOVF   2B,W
043F:  MOVWF  38
0440:  MOVF   2A,W
0441:  MOVWF  37
0442:  CLRF   3E
0443:  CLRF   3D
0444:  MOVLW  20
0445:  MOVWF  3C
0446:  MOVLW  82
0447:  MOVWF  3B
0448:  CALL   0CD
0449:  MOVF   7A,W
044A:  MOVWF  2D
044B:  MOVF   79,W
044C:  MOVWF  2C
044D:  MOVF   78,W
044E:  MOVWF  2B
044F:  MOVF   77,W
0450:  MOVWF  2A
0451:  DECFSZ 31,F
0452:  GOTO   43A
0453:  MOVF   2D,W
0454:  MOVWF  3A
0455:  MOVF   2C,W
0456:  MOVWF  39
0457:  MOVF   2B,W
0458:  MOVWF  38
0459:  MOVF   2A,W
045A:  MOVWF  37
045B:  MOVF   37,W
045C:  SUBLW  B6
045D:  MOVWF  37
045E:  CLRF   7A
045F:  MOVF   38,W
0460:  MOVWF  3B
0461:  BSF    38.7
0462:  BCF    03.0
0463:  RRF    38,F
0464:  RRF    39,F
0465:  RRF    3A,F
0466:  RRF    7A,F
0467:  RRF    79,F
0468:  RRF    78,F
0469:  RRF    77,F
046A:  DECFSZ 37,F
046B:  GOTO   462
046C:  BTFSS  3B.7
046D:  GOTO   479
046E:  COMF   77,F
046F:  COMF   78,F
0470:  COMF   79,F
0471:  COMF   7A,F
0472:  INCF   77,F
0473:  BTFSC  03.2
0474:  INCF   78,F
0475:  BTFSC  03.2
0476:  INCF   79,F
0477:  BTFSC  03.2
0478:  INCF   7A,F
0479:  MOVF   7A,W
047A:  MOVWF  2D
047B:  MOVF   79,W
047C:  MOVWF  2C
047D:  MOVF   78,W
047E:  MOVWF  2B
047F:  MOVF   77,W
0480:  MOVWF  2A
0481:  BTFSS  2D.7
0482:  GOTO   490
0483:  DECF   2F,F
0484:  BSF    2F.5
0485:  COMF   2A,F
0486:  COMF   2B,F
0487:  COMF   2C,F
0488:  COMF   2D,F
0489:  INCF   2A,F
048A:  BTFSC  03.2
048B:  INCF   2B,F
048C:  BTFSC  03.2
048D:  INCF   2C,F
048E:  BTFSC  03.2
048F:  INCF   2D,F
0490:  MOVLW  3B
0491:  MOVWF  36
0492:  MOVLW  9A
0493:  MOVWF  35
0494:  MOVLW  CA
0495:  MOVWF  34
0496:  CLRF   33
0497:  MOVLW  0A
0498:  MOVWF  31
0499:  MOVF   2E,W
049A:  BTFSC  03.2
049B:  INCF   2F,F
049C:  BSF    03.1
049D:  MOVLW  2A
049E:  MOVWF  04
049F:  BCF    03.7
04A0:  MOVF   2D,W
04A1:  MOVWF  3A
04A2:  MOVF   2C,W
04A3:  MOVWF  39
04A4:  MOVF   2B,W
04A5:  MOVWF  38
04A6:  MOVF   2A,W
04A7:  MOVWF  37
04A8:  MOVF   36,W
04A9:  MOVWF  3E
04AA:  MOVF   35,W
04AB:  MOVWF  3D
04AC:  MOVF   34,W
04AD:  MOVWF  3C
04AE:  MOVF   33,W
04AF:  MOVWF  3B
04B0:  CALL   3E5
04B1:  MOVF   78,W
04B2:  MOVF   77,F
04B3:  BTFSS  03.2
04B4:  GOTO   4C8
04B5:  INCF   2E,W
04B6:  SUBWF  31,W
04B7:  BTFSC  03.2
04B8:  GOTO   4C8
04B9:  MOVF   2F,W
04BA:  BTFSC  03.2
04BB:  GOTO   4CA
04BC:  ANDLW  0F
04BD:  SUBWF  31,W
04BE:  BTFSC  03.2
04BF:  GOTO   4C2
04C0:  BTFSC  03.0
04C1:  GOTO   4FA
04C2:  BTFSC  2F.7
04C3:  GOTO   4FA
04C4:  BTFSC  2F.6
04C5:  GOTO   4CA
04C6:  MOVLW  20
04C7:  GOTO   4F6
04C8:  MOVLW  20
04C9:  ANDWF  2F,F
04CA:  BTFSS  2F.5
04CB:  GOTO   4D8
04CC:  BCF    2F.5
04CD:  MOVF   2E,W
04CE:  BTFSS  03.2
04CF:  DECF   2F,F
04D0:  MOVF   77,W
04D1:  MOVWF  2F
04D2:  MOVLW  2D
04D3:  MOVWF  37
04D4:  CALL   363
04D5:  MOVF   2F,W
04D6:  MOVWF  77
04D7:  CLRF   2F
04D8:  MOVF   2E,W
04D9:  SUBWF  31,W
04DA:  BTFSS  03.2
04DB:  GOTO   4E6
04DC:  MOVF   77,W
04DD:  MOVWF  2F
04DE:  MOVLW  2E
04DF:  MOVWF  37
04E0:  CALL   363
04E1:  MOVF   2F,W
04E2:  MOVWF  77
04E3:  MOVLW  20
04E4:  ANDWF  2F,F
04E5:  MOVLW  00
04E6:  MOVLW  30
04E7:  BTFSS  2F.5
04E8:  GOTO   4F6
04E9:  BCF    2F.5
04EA:  MOVF   2E,W
04EB:  BTFSS  03.2
04EC:  DECF   2F,F
04ED:  MOVF   77,W
04EE:  MOVWF  2F
04EF:  MOVLW  2D
04F0:  MOVWF  37
04F1:  CALL   363
04F2:  MOVF   2F,W
04F3:  MOVWF  77
04F4:  CLRF   2F
04F5:  MOVLW  30
04F6:  ADDWF  77,F
04F7:  MOVF   77,W
04F8:  MOVWF  37
04F9:  CALL   363
04FA:  BCF    03.1
04FB:  MOVF   36,W
04FC:  MOVWF  3A
04FD:  MOVF   35,W
04FE:  MOVWF  39
04FF:  MOVF   34,W
0500:  MOVWF  38
0501:  MOVF   33,W
0502:  MOVWF  37
0503:  CLRF   3E
0504:  CLRF   3D
0505:  CLRF   3C
0506:  MOVLW  0A
0507:  MOVWF  3B
0508:  CALL   3E5
0509:  MOVF   7A,W
050A:  MOVWF  36
050B:  MOVF   79,W
050C:  MOVWF  35
050D:  MOVF   78,W
050E:  MOVWF  34
050F:  MOVF   77,W
0510:  MOVWF  33
0511:  DECFSZ 31,F
0512:  GOTO   49C
0513:  BCF    0A.3
0514:  BCF    0A.4
0515:  GOTO   5B5 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device ADC = 10; 
....................  
.................... #use delay(clock = 4000000) 
*
0014:  MOVLW  38
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   028
001A:  MOVLW  01
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  4A
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  GOTO   026
0026:  DECFSZ 00,F
0027:  GOTO   01A
0028:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0041:  MOVLW  0F
0042:  BSF    03.5
0043:  ANDWF  06,W
0044:  IORLW  F0
0045:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0046:  BCF    03.5
0047:  BSF    06.2
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    06.0
....................    delay_cycles(1); 
004A:  NOP
....................    high = lcd_read_nibble(); 
004B:  CALL   035
004C:  MOVF   78,W
004D:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
004E:  BCF    06.0
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    06.0
....................    delay_us(1); 
0051:  NOP
....................    low = lcd_read_nibble(); 
0052:  CALL   035
0053:  MOVF   78,W
0054:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
0055:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0056:  MOVLW  0F
0057:  BSF    03.5
0058:  ANDWF  06,W
0059:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005A:  BCF    03.5
005B:  SWAPF  3F,W
005C:  MOVWF  77
005D:  MOVLW  F0
005E:  ANDWF  77,F
005F:  MOVF   77,W
0060:  IORWF  3E,W
0061:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0035:  MOVF   06,W
0036:  MOVWF  77
0037:  SWAPF  06,W
0038:  ANDLW  0F
0039:  MOVWF  78
....................   #endif 
003A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0029:  SWAPF  3F,W
002A:  ANDLW  F0
002B:  MOVWF  77
002C:  MOVLW  0F
002D:  ANDWF  06,W
002E:  IORWF  77,W
002F:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0030:  NOP
....................    lcd_output_enable(1); 
0031:  BSF    06.0
....................    delay_us(2); 
0032:  GOTO   033
....................    lcd_output_enable(0); 
0033:  BCF    06.0
0034:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003B:  BSF    03.5
003C:  BCF    06.0
....................    lcd_rs_tris(); 
003D:  BCF    06.1
....................    lcd_rw_tris(); 
003E:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003F:  BCF    03.5
0040:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0062:  MOVF   78,W
0063:  MOVWF  3E
0064:  BTFSC  3E.7
0065:  GOTO   041
....................    lcd_output_rs(address); 
0066:  BTFSS  3C.0
0067:  BCF    06.1
0068:  BTFSC  3C.0
0069:  BSF    06.1
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_rw(0); 
006B:  BCF    06.2
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_enable(0); 
006D:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006E:  SWAPF  3D,W
006F:  MOVWF  3E
0070:  MOVLW  0F
0071:  ANDWF  3E,F
0072:  MOVF   3E,W
0073:  MOVWF  3F
0074:  CALL   029
....................    lcd_send_nibble(n & 0xf); 
0075:  MOVF   3D,W
0076:  ANDLW  0F
0077:  MOVWF  3E
0078:  MOVWF  3F
0079:  CALL   029
007A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007B:  MOVLW  0F
007C:  BSF    03.5
007D:  ANDWF  06,W
007E:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
007F:  BCF    06.0
....................    lcd_rs_tris(); 
0080:  BCF    06.1
....................    lcd_rw_tris(); 
0081:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0082:  BCF    03.5
0083:  BCF    06.1
....................    lcd_output_rw(0); 
0084:  BCF    06.2
....................    lcd_output_enable(0); 
0085:  BCF    06.0
....................      
....................    delay_ms(15); 
0086:  MOVLW  0F
0087:  MOVWF  38
0088:  CALL   014
....................    for(i=1;i<=3;++i) 
0089:  MOVLW  01
008A:  MOVWF  2A
008B:  MOVF   2A,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    { 
....................        lcd_send_nibble(3); 
008F:  MOVLW  03
0090:  MOVWF  3F
0091:  CALL   029
....................        delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  38
0094:  CALL   014
0095:  INCF   2A,F
0096:  GOTO   08B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0097:  MOVLW  02
0098:  MOVWF  3F
0099:  CALL   029
....................    delay_ms(5); 
009A:  MOVLW  05
009B:  MOVWF  38
009C:  CALL   014
....................    for(i=0;i<=3;++i) 
009D:  CLRF   2A
009E:  MOVF   2A,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A2:  MOVF   2A,W
00A3:  CALL   004
00A4:  MOVWF  2B
00A5:  CLRF   3C
00A6:  MOVF   2B,W
00A7:  MOVWF  3D
00A8:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A9:  INCF   2A,F
00AA:  GOTO   09E
00AB:  BCF    0A.3
00AC:  BCF    0A.4
00AD:  GOTO   532 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0351:  DECFSZ 39,W
0352:  GOTO   354
0353:  GOTO   357
....................       address=LCD_LINE_TWO; 
0354:  MOVLW  40
0355:  MOVWF  3A
0356:  GOTO   358
....................    else 
....................       address=0; 
0357:  CLRF   3A
....................       
....................    address+=x-1; 
0358:  MOVLW  01
0359:  SUBWF  38,W
035A:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
035B:  MOVF   3A,W
035C:  IORLW  80
035D:  MOVWF  3B
035E:  CLRF   3C
035F:  MOVF   3B,W
0360:  MOVWF  3D
0361:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0362:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0363:  MOVF   37,W
0364:  XORLW  07
0365:  BTFSC  03.2
0366:  GOTO   371
0367:  XORLW  0B
0368:  BTFSC  03.2
0369:  GOTO   376
036A:  XORLW  06
036B:  BTFSC  03.2
036C:  GOTO   37E
036D:  XORLW  02
036E:  BTFSC  03.2
036F:  GOTO   384
0370:  GOTO   389
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0371:  MOVLW  01
0372:  MOVWF  38
0373:  MOVWF  39
0374:  CALL   351
0375:  GOTO   38E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0376:  CLRF   3C
0377:  MOVLW  01
0378:  MOVWF  3D
0379:  CALL   03B
....................                      delay_ms(2); 
037A:  MOVLW  02
037B:  MOVWF  38
037C:  CALL   014
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
037D:  GOTO   38E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
037E:  MOVLW  01
037F:  MOVWF  38
0380:  MOVLW  02
0381:  MOVWF  39
0382:  CALL   351
0383:  GOTO   38E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0384:  CLRF   3C
0385:  MOVLW  10
0386:  MOVWF  3D
0387:  CALL   03B
0388:  GOTO   38E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0389:  MOVLW  01
038A:  MOVWF  3C
038B:  MOVF   37,W
038C:  MOVWF  3D
038D:  CALL   03B
....................      #endif 
....................    } 
038E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int deger; 
.................... float gerilim , sicaklik; 
....................  
.................... void main(){ 
*
0516:  BSF    03.5
0517:  BSF    1F.0
0518:  BSF    1F.1
0519:  BSF    1F.2
051A:  BCF    1F.3
051B:  BCF    03.7
051C:  MOVLW  1F
051D:  ANDWF  03,F
.................... setup_psp(PSP_DISABLED); 
051E:  BCF    09.4
.................... setup_timer_1(T1_DISABLED); 
051F:  BCF    03.5
0520:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); 
0521:  MOVLW  00
0522:  MOVWF  78
0523:  MOVWF  12
0524:  MOVLW  00
0525:  BSF    03.5
0526:  MOVWF  12
.................... setup_ccp1(CCP_OFF); 
0527:  MOVLW  F0
0528:  BCF    03.5
0529:  ANDWF  17,F
.................... setup_ccp2(CCP_OFF); 
052A:  ANDWF  1D,F
....................  
.................... set_tris_a(0x20); 
052B:  MOVLW  20
052C:  BSF    03.5
052D:  MOVWF  05
.................... set_tris_b(0x00); 
052E:  MOVLW  00
052F:  MOVWF  06
....................  
.................... lcd_init(); 
0530:  BCF    03.5
0531:  GOTO   07B
....................  
.................... setup_adc(adc_clock_div_32); 
0532:  BCF    1F.6
0533:  BSF    1F.7
0534:  BSF    03.5
0535:  BSF    1F.7
0536:  BCF    03.5
0537:  BSF    1F.0
.................... setup_adc_ports(ALL_ANALOG); 
0538:  BSF    03.5
0539:  BCF    1F.0
053A:  BCF    1F.1
053B:  BCF    1F.2
053C:  BCF    1F.3
.................... set_adc_channel(4); 
053D:  MOVLW  20
053E:  MOVWF  78
053F:  BCF    03.5
0540:  MOVF   1F,W
0541:  ANDLW  C7
0542:  IORWF  78,W
0543:  MOVWF  1F
.................... delay_us(20); 
0544:  MOVLW  06
0545:  MOVWF  77
0546:  DECFSZ 77,F
0547:  GOTO   546
0548:  NOP
....................  
....................  
....................  
.................... while(true){ 
.................... deger = read_adc(); 
0549:  BSF    1F.2
054A:  BTFSC  1F.2
054B:  GOTO   54A
054C:  BSF    03.5
054D:  MOVF   1E,W
054E:  BCF    03.5
054F:  MOVWF  20
0550:  MOVF   1E,W
0551:  MOVWF  21
....................  
.................... gerilim = deger*4.88759; 
0552:  MOVF   21,W
0553:  MOVWF  2B
0554:  MOVF   20,W
0555:  MOVWF  2A
0556:  GOTO   0AE
0557:  MOVF   7A,W
0558:  MOVWF  3A
0559:  MOVF   79,W
055A:  MOVWF  39
055B:  MOVF   78,W
055C:  MOVWF  38
055D:  MOVF   77,W
055E:  MOVWF  37
055F:  MOVLW  23
0560:  MOVWF  3E
0561:  MOVLW  67
0562:  MOVWF  3D
0563:  MOVLW  1C
0564:  MOVWF  3C
0565:  MOVLW  81
0566:  MOVWF  3B
0567:  CALL   0CD
0568:  MOVF   7A,W
0569:  MOVWF  25
056A:  MOVF   79,W
056B:  MOVWF  24
056C:  MOVF   78,W
056D:  MOVWF  23
056E:  MOVF   77,W
056F:  MOVWF  22
....................  
.................... sicaklik = (gerilim / 10) + 2; 
0570:  MOVF   25,W
0571:  MOVWF  2D
0572:  MOVF   24,W
0573:  MOVWF  2C
0574:  MOVF   23,W
0575:  MOVWF  2B
0576:  MOVF   22,W
0577:  MOVWF  2A
0578:  CLRF   31
0579:  CLRF   30
057A:  MOVLW  20
057B:  MOVWF  2F
057C:  MOVLW  82
057D:  MOVWF  2E
057E:  GOTO   142
057F:  MOVF   7A,W
0580:  MOVWF  2D
0581:  MOVF   79,W
0582:  MOVWF  2C
0583:  MOVF   78,W
0584:  MOVWF  2B
0585:  MOVF   77,W
0586:  MOVWF  2A
0587:  BCF    03.1
0588:  MOVF   7A,W
0589:  MOVWF  31
058A:  MOVF   79,W
058B:  MOVWF  30
058C:  MOVF   78,W
058D:  MOVWF  2F
058E:  MOVF   77,W
058F:  MOVWF  2E
0590:  CLRF   35
0591:  CLRF   34
0592:  CLRF   33
0593:  MOVLW  80
0594:  MOVWF  32
0595:  GOTO   20E
0596:  MOVF   7A,W
0597:  MOVWF  29
0598:  MOVF   79,W
0599:  MOVWF  28
059A:  MOVF   78,W
059B:  MOVWF  27
059C:  MOVF   77,W
059D:  MOVWF  26
....................  
.................... printf(lcd_putc,"\fSicaklik= %fC"sicaklik); 
059E:  MOVLW  0C
059F:  BSF    03.6
05A0:  MOVWF  0D
05A1:  MOVLW  00
05A2:  MOVWF  0F
05A3:  BCF    03.0
05A4:  MOVLW  0B
05A5:  BCF    03.6
05A6:  MOVWF  2A
05A7:  GOTO   38F
05A8:  MOVLW  89
05A9:  MOVWF  04
05AA:  MOVF   29,W
05AB:  MOVWF  2D
05AC:  MOVF   28,W
05AD:  MOVWF  2C
05AE:  MOVF   27,W
05AF:  MOVWF  2B
05B0:  MOVF   26,W
05B1:  MOVWF  2A
05B2:  MOVLW  02
05B3:  MOVWF  2E
05B4:  GOTO   434
05B5:  MOVLW  43
05B6:  MOVWF  37
05B7:  CALL   363
.................... delay_ms(100); 
05B8:  MOVLW  64
05B9:  MOVWF  38
05BA:  CALL   014
05BB:  GOTO   549
....................  
.................... } 
....................  
.................... } 
....................  
05BC:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
